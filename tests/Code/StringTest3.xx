
// String Test 3
// 04/06/2015

import Console, ASCII, Algo

/// Test for string concatenation
class Test {
	
	static void print(String s) {
		Intrinsics.printLn(s.pointer())
	}
	
	static void main() {
		/*Test.test1()
		Test.test2()
		Test.test3()
		Test.test4()
		Test.test5()
		Test.test6()*/
		Test.test7()
	}
	
	static void test1() {
		
		var a := "a", b := "b", c := "c"
		Test.print(a.append("b"))
		
	}
	
	static String getString() {
		return "Hello"
	}
	
	static void test2() {
		
		Console.writeLine(new String(
			char: ASCII.hyphen,
			count: Test.getString().size()
		))
		
	}
	
	static void test3() {
		
		var s := "a"
		repeat 28 {
			s.append(s.copy())
			Console.writeLine(s.size())
		}
		
	}
	
	static void test4() {
		
		Console.writeLine("foo".append("bar").append("test").append("lol").size())
		Console.writeLine("\("a")\("b")\("c")\("d")\("e")\("f")")
		
	}
	
	static void test5() {
		
		var msg := "Hello, World!"
		const key := 25
		
		var enc := Test.test5Cypher(msg, key)
		var dec := Test.test5Cypher(enc, key)
		
		Console.writeLine("message:   \(msg)")
		Console.writeLine("encrypted: \(enc)")
		Console.writeLine("decrypted: \(dec)")
		
	}
	
	// Encrypts/ decrypts the specified string
	private static String test5Cypher(String message, int key) {
		
		String coded := message.copy()
		
		for int i := 0 ; i < coded.size() ; i++ {
			coded.setChar(i, coded.getChar(i) ^ key)
		}
		
		return coded
		
	}
	
	private static String subString(String s, int from, int length := String.end) {
		return s.subString(from, Algo.min(length, s.size() - from))
	}
	
	private static String rightString(String s, int length) {
		return s.subString(s.size() - length)
	}
	
	static void test6() {
		
		//Console.writeLine("Hello, World".subString(0, 5))
		foreach s : { "Hello", "World", "Lol" } {
			for int i := 0, n := s.size() ; i < n ; i++ {
				Console.writeLine(
					//Test.subString(s, i, 5)
					Test.rightString(s, i + 1)
				)
			}
		}
		
	}
	
	static void test7() {
		
		new Test().test7This()
		
	}
	
	void printLn(String s) {
		Console.writeLine(s)
	}
	
	private void test7This() {
		const key := 24
		foreach s : { "Hello", "World", "Foo", "bar" } {
			var c := s.copy()
			for int i := 0, n := c.size() ; i < n ; i++ {
				c.setChar(i, c.getChar(i) ^ key)
			}
			printLn("\"\(s)\" -> \"\(c)\"")
		}
	}
	
}
