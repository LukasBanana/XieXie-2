
// Proc (Overloading) Test 1
// 14/03/2015

class A {
	String[][] s
}

class B : A {
	A[] a
	int x
	C getC() {
		return new C()
	}
	C[] getCArray() {
		return { new C() }
	}
	B inc(int x) {
		this.x += x
		return this
	}
	A getA2() {
		return this
	}
	A getA1() {
		return super
	}
	void print() { /* do something here ... */ }
}

class C {
	B b
	static void test() {
		int i
		C c
		i := c.b.getC().b.a[0].s.size()
		i := c.b.getCArray().size()
		//i := c.b.getCArray()[0].b
		i := c.b.getCArray()[0].b.a[0].s.size()
	}
}

class Base {
	
	int[] f(int x, int y, int z) {
		return { x, y, z }
	}
	
	float f(int x) {
		return 0.0
	}
	
	float f(float x) {
		return x/2.0
	}
	
	float[] g(float x) {
		return { x }
	}
	
	int x // base member
	
}

class ProcTest : Base {
	
	int x // sub member
	
	static void main() {
		ProcTest app := new ProcTest()
		app.test1(5)
		app.test2(2)
	}
	
	int f(int x) {
		return x*x
	}
	float[] f(float x) {
		return { x*x }
	}
	static int[] getIntArray() {
		return ProcTest.intArray
	}
	
	static int[] intArray := { 1, 2, 3 }
	
	static String f(int x, int y) {
		return null
	}
	static B makeB() {
		return new B
	}
	
	static int fibonacci(int n) {
		if n <= 2 {
			return 1
		} else {
			return ProcTest.fibonacci(n - 1) + ProcTest.fibonacci(n - 2)
		}
	}
	
	void test1(int p) {
		
		int		a := f(2)
		float[]	b := ProcTest.f(2.0)
		float[]	c := this.f(2.5)
		String	d := f(1, 2)
		int[] 	e := super.f(0, 1, 2)
		float[] f := g(0.0) // note: variable f overrides the procedure f -> this.f is required now
		
		a := x + super.x
		
		int		g := this.f(p*2) + ProcTest.f(p+3)
		float	h := this.f((float)p*4.0)[0]
		
		// expression statements
		new B.print()
		new B().inc(2).print()
		(new B()).print()
		
		ProcTest.makeB().inc(5).print()
		
	}
	
	void test2(int p) {
		
	}
	
}

