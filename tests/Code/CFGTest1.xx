
// CFG Test 1
// 08/03/2015

module MyModule {
	static int foo(int x)
	static void bar()
}

class Test {
	
	init() {}
	
	int func(int x) {
		if x = 0 {
			return 1
		} else {
			return x*x
		}
	}
	float func(float x) {
		return x*x
	}
	int func(int a, int b) {
		return a+b*2
	}
	
	static int fib1(int n) {
		if n <= 2 {
			return 1
		} else {
			return Test.fib1(n-1) + Test.fib1(n-2)
		}
	}
	
	static int main(String[] args) {
		Test app := new Test()
		app.test1(1)
		return 0
	}
	
	int test1(int p) {
		
		int x, y, i, j, a, b, c, d
		float e, f
		
		// --- expressions ---
		/*a := 17 + p
		b := 2
		c := (a + b) * 4				// c = (1+2)*4 = 3*4 = 12
		d := 2 * c + (3 - 5) * -2		// d = 2*12+(3-5)*(-2) = 24+(-2)*(-2) = 24+4 = 28
		
		e := 3.5
		f := e*2.1 + (float)c * -0.5	// f = 3.5*2+12*(-0.5) = 7.35-6 = 1.35
		
		f++		// f = 2.35
		a--		// a = 0
		a += 5	// a = 5*/
		
		// --- if statement ---
		x := p
		y := -7*x
		
		/*if x > 5 and f < 10.0 and not (x != 2) {
		//if x > 5 and f < 10.0 and (int)(not false) != 2 {
		//if x > 5 and f < 10.0 and not true {
			if x = 3 {
				y := 1
			}
		} else {
			y := 2
		}*/
		
		/*if x > 5 or (x < 10 and y % p + 2 = 4 * p) {
			y := 1
		} else {
			y := 2
		}
		y++*/
		
		// --- unconditional loop ---
		repeat {
			i += 4
			if i > 100 {
				break
			} else {
				j += i
			}
			i++
		}
		i := 42
		
		// --- switch-case ---
		/*switch j {
			case 1:
				i += 2
			case 2:
				i -= 3
			case 3, 4, 5:
				if i > 5 {
					break
				}
				i := 4
			default:
				i := 8
		}
		i := 0*/
		
		// --- range-based for loop ---
		/*for idx : 1 .. 5 {
			i -= 333
		}
		i := -6*/
		
		/*for idx1 : 1 .. 10 {
			j += idx1
			x,y := 2
			
			for idx2 : 3 .. -4 -> 2 {
				i++
			}
			repeat 5 {
				i--
			}
		}
		i := 29*/
		
		// --- while loop ---
		/*i := 0
		while i < 10 {
			i += 6
		}
		i := 17*/
		
		// --- do-while loop ---
		/*i := 3
		do {
			//if i = 3 { continue }
			p <<= 1
			if p = 3 {
				return i - 5
			}
			//continue
			//break
			i <<= 2
			//if i = 7 { break }
		} while i < 22
		i := 3*/
		
		// --- for loop ---
		/*for int i := -2 ; i < 10 ; i += 4 {
			if i = 4 {
				continue
			} else if i = 6 {
				break
			} else if i = 7 {
				for ;; {}
				//repeat{}
			}
			p /= 3
		}
		
		if i = 3 {} else {}
		
		p := -1*/
		
		// --- direct procedure call ---
		a := func(3)
		f := func(5.2)
		func(5)
		func(2*(5 + j))
		func(2.3)
		func(i, j)
		
		// --- invocations ---
		a := MyModule.foo(a)
		MyModule.bar()
		
		// --- anonymous class ---
		//var _i := new String { int size() { return 1 } }.size()
		
		// --- foreach loop ---
		//...
		
		return 0
		
	}
	
	/*int test1(int x) {
		if x > 10 {
			return x + 2
		} else {
			return 3
		}
	}*/
	
}

