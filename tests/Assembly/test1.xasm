; Test
; 07/07/2014

;  lng0 -> get relative position (from instruction) of label "lng0" (word aligned)
; @lng0 -> get absolute position of label "lng0" (word aligned)
; *lng0 -> get value at label "lng0"

00000000			call	Main			; equivalent to "call ($pc) 5"
00000001			stop					; quit
00000002			lda		$r3, @.for		; load global address of '.for0' ($r3 = byte_code_memory + 11)
00000003			mov		$r4, .for		; load relative address of '.for' ($r4 = 8)
00000003			mov		$r5, @.for		; load absolute address of '.for' ($r4 = 11)
00000005	Main:	mov		$r1, *lng0		; load value of 'lng0' ($r1 = 999)
00000006			add		$sp, 4			; increase stack for local scope (4 bytes)
00000007			stw		$r1, ($lb) 8	; store value of $r1 in local scope (after dynamic-link)
00000008			lda 	$r2, @str0		; load address of 'str0' ($r2 = byte_code_memory + 18)
00000009			xor		$r0, $r0		; i := 0
00000010			mov		$r1, 10			; n := 10
00000011	.for0:	cmp		$r0, $r1		; while i < 10
00000012			jge		.end0
00000013			push	$r2
00000014			call	Intr.PrintLn	; print str0 with new-line
00000015			inc		$r0				; i++
00000016			jmp		.for0
00000017	.end0:	ret						; return
00000018	str0:	.ascii	"Hello, World!"
00000019	lng0:	.word	999
			Math.Sq:
00000020			ldw		$r0, ($lb) -4
00000021			mul		$r0, $r0
00000022			stw		$r0, ($lb) -4
00000022			ret						; Optimize retunr value by writing it back to the argument

; Export function addresses
.export "_ZN@Main" @Main
.export "Main::Sq" @Math.Sq
