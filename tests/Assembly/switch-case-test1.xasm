
; XASM Switch-Case Test 1
; 27/03/2015

.pragma("export all")

root:

call main
stop

; void main()
main:
	; Print(str_info)
	lda $r0, @str_info
	push $r0
	insc Print
	
	; int x := InputInt()
	insc InputInt
	mov $r1, $ar
	
	; ar := proc(x)
	push $r1
	call proc
	
	; PrintInt(ar)
	push $ar
	insc PrintInt
	
	; PrintLn("")
	lda $r0, @str_null
	push $r0
	insc PrintLn
	
	ret (0) 0

; int proc(int)
proc:
	ldw $r0, ($lb) -4
	
	mov $cf, $r0
	jl proc_invalid
	mov $r1, 3
	cmp $r0, $r1
	jg proc_invalid
	
	lda $r1, @switch0_labels0	; load address where the switch jump addresses are stored
	sll $r0, $r0, 2				; multiply by 4
	add $r1, $r1, $r0			; get address where the desired switch jump address is stored
	ldw $r2, ($r1) 0			; load desired address for switch jump
	jmp $r2						; jump to the desired switch case
	
	switch0_case0:
		mov $r4, 42
		jmp switch_end
	switch0_case1:
		mov $r4, 7
		jmp switch_end
	switch0_case2:
		mov $r4, -3
		jmp switch_end
	switch0_case3:
		mov $r4, 19
	switch_end:
	
	mov $ar, $r4
	ret 1
	
	proc_invalid:
	mov $ar, 0
	ret 1

switch0_labels0: ; i in [0 .. 3]
	.word @switch0_case0
	.word @switch0_case1
	.word @switch0_case2
	.word @switch0_case3

str_info: .ascii "enter switch index [0 .. 3]: "
str_null: .ascii ""
