/*
 * Vector3.xx
 * 
 * This file is part of the "XieXie-Compiler" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

/**
Vector3 class with components: x, y, z.
\author Lukas Hermanns
*/
class Vector3 {
	
	init() {}
	init(float xx, float yy, float zz) {
		x := xx
		y := yy
		z := zz
	}
	init(Vector3 rhs) {
		if rhs != null {
			x := rhs.x
			y := rhs.y
			z := rhs.z
		}
	}
	
	Vector3 add(Vector3 rhs) {
		if rhs != null {
			return new Vector3(x + rhs.x, y + rhs.y, z + rhs.z)
		} else {
			return new Vector3(this)
		}
	}
	
	Vector3 sub(Vector3 rhs) {
		if rhs != null {
			return new Vector3(x - rhs.x, y - rhs.y, z - rhs.z)
		} else {
			return new Vector3(this)
		}
	}
	
	//! Computes the squared length of this vector.
	float lengthSq() {
		return Vector3.dot(this, this)
	}
	
	//! Computes the length of this vector.
	float length() {
		return Intrinsics.sqrt(lengthSq())
	}
	
	//! Computes the scalar product for lhs and rhs.
	static float dot(Vector3 lhs, Vector3 rhs) {
		if lhs != null and rhs != null {
			return lhs.x*rhs.x + lhs.y*rhs.y + lhs.z*rhs.z
		} else {
			return 0.0
		}
	}
	
	//! Computes the cross product for lhs and rhs.
	static Vector3 cross(Vector3 lhs, Vector3 rhs) {
		if lhs != null and rhs != null {
			return new Vector3(
				lhs.y*rhs.z - rhs.y*lhs.z,
				rhs.x*lhs.z - lhs.x*rhs.z,
				lhs.x*rhs.y - rhs.x*lhs.y
			)
		} else {
			return new Vector3()
		}
	}
	
	float x, y, z
	
}
