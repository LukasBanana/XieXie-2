/*
 * Core.xx
 * 
 * This file is part of the "XieXie 2.0 Project" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

/**
Root base object for all classes.
\note typeID = 0
*/
extern class Object {
	
	/// Returns the type ID of this object
	[[final]]
	int typeID()
	
	/// Returns the reference count of this object
	[[final]]
	int refCount()
	
	/// Returns true if this instance is equal to 'rhs' (right-hand-side).
	bool equals(Object rhs)
	/// Returns a string representation of this instance.
	String toString()
	
	/**
	Returns a 32-bit pointer of this object with the specified offset.
	@param offset Specifies the offset (in bytes) added to the origin pointer of this instance.
	If this is zero, the pointer refers to the first member variable in this instance,
	excluding the run-time type information (RTTI) of the class "Object".
	@remarks XieXie actually has no support for pointer arithmetic,
	but this procedure can be used for interoperability with modules.
	@note This is only for low-level programming and for experienced XieXie programmers!
	*/
	[[final]]
	int pointerOffset(int offset)
	
}

/**
UTF-8 string class.
\note typeID = 1
*/
extern class String {
	
	/// String end position.
	static const end := -1
	
	init()
	init(int size)
	init(String src)
	
	[[override]]
	bool equals(Object rhs)
	
	[[override]]
	String toString()
	
	String copy()
	
	/// Returns the size (or rather length) of the string.
	int size()
	/// Resizes the string to the specified size (excluding the null terminator).
	void resize(int size)
	/// Adjusts the string size to the first appearance of a null terminator.
	void adjust()
	
	bool empty()
	
	String add(String rhs)
	
	String add(bool rhs)
	String add(int rhs)
	String add(float rhs)
	
	String subString(int pos, int len := -1)
	
	void setChar(int pos, int char)
	int getChar(int pos)
	
	/**
	Returns the raw pointer (as integer) which points to
	the first character in this null terminated string.
	*/
	[[final]]
	int pointer()
	
}

/**
Array class for pointers.
\note typeID = 2
*/
extern class Array {
	
	init()
	init(int size)
	
	[[override]]
	bool equals(Object rhs)
	
	Array copy()
	
	//! Returns the number of elements in the array
	int size()
	void resize(int size)
	
	bool empty()
	
	void add(Object entry)
	void remove(int pos)
	
	void setEntry(int pos, Object entry)
	Object getEntry(int pos)
	
	//! Returns the index (beginning from 0) for the entry or -1, if the array does not contain it
	int find(Object entry, int startPos := 0)
	bool contains(Object entry)
	
	//! Returns the raw pointer (as integer) of this array.
	[[final]]
	int pointer()
	
}

/**
Array class for built-in data types.
\note typeID = 3
*/
extern class PrimArray {
	//...
}

/**
Array class for built-in boolean data types.
\note typeID = 4
*/
extern class BoolArray {
	//...
}

/**
General purpose buffer. This class manages a pointer.
\note typeID = 5
*/
extern class Buffer {
	
	[[override]]
	bool equals(Object rhs)
	
	Buffer copy()
	
	int size()
	void resize(int s)
	
	void writeByte(int offset, int value)
	int readByte(int offset)
	
	void writeInt(int offset, int value)
	int readInt(int offset)
	
	void writeFloat(int offset, float value)
	float readFloat(int offset)
	
	//! Writes the specified sub buffer into this buffer.
	void writeBuffer(int offset, int size, Buffer subBuffer)
	//! Reads this buffer into the specified sub buffer.
	void readBuffer(int offset, int size, Buffer subBuffer)
	
	//! Returns the raw pointer (as integer) of this buffer.
	int pointer()
	
}

/**
Low-level intrinsic functions.
\note typeID = 6
*/
extern class Intrinsics {
	
	static int allocMem(int size)
	static void freeMem(int ptr)
	static void copyMem(int destPtr, int srcPtr, int size)
	
	static void sysCall(int commandPtr)
	static void clearTerm()
	static void print(int textPtr)
	static void printLn(int textPtr)
	static void printInt(int value)
	static void printFloat(float value)
	static void input(int stringPtr, int maxLen)
	static int inputInt()
	static float inputFloat()
	
	static int createFile(int filenamePtr)
	static int deleteFile(int filenamePtr)
	static int openFile(int filenamePtr, int flagsPtr)
	static void closeFile(int handlePtr)
	static int fileSize(int handlePtr)
	static void fileSetPos(int handlePtr, int pos)
	static int fileGetPos(int handlePtr)
	static int fileEOF(int handlePtr)
	static void writeByte(int handlePtr, int value)
	static void writeInt(int handlePtr, int value)
	static void writeFloat(int handlePtr, float value)
	static void writeBuffer(int handlePtr, int bufferPtr, int size)
	static int readByte(int handlePtr)
	static int readInt(int handlePtr)
	static float readFloat(int handlePtr)
	static void readBuffer(int handlePtr, int bufferPtr, int size)
	
	static float sin(float x)
	static float cos(float x)
	static float tan(float x)
	static float asin(float x)
	static float acos(float x)
	static float atan(float x)
	static float pow(float b, float e)
	static float sqrt(float x)
	static float log(float x)
	
	static int randInt()
	static float randFloat()
	static int time()
	static void sleep(int duration)
	
}

