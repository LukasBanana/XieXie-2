/*
 * Core.xx
 * 
 * This file is part of the "XieXie 2.0 Project" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

/// Implicit base class of all other classes.
extern class Object {
	
	/// Returns the reference count of this object.
	[[final]]
	int refCount()
	
	/// Returns the type ID of this object.
	[[final]]
	int typeID()
	
	/// Returns true if this instance is equal to 'rhs' (right-hand-side).
	bool equals(Object rhs)
	/// Returns a string representation of this instance.
	String toString()
	
	/**
	Returns a 32-bit pointer of this object.
	@return Pointer to the first member variable of this object.
	@remarks XieXie actually has no support for pointer arithmetic,
	but this procedure can be used for interoperability with modules.
	@note This is only for low-level programming and for experienced XieXie programmers!
	*/
	int pointer()
	
}

/// UTF-8 string class.
extern class String {
	
	/// String end position.
	static const end := -1
	
	/// Initializes an empty string.
	init()
	/// Initializes an string with 'size' characters.
	init(int size)
	/// Initailizes a string from the specified source.
	init(String source)
	
	/// Returns true if this string is equal to the specified string instance.
	[[override]]
	bool equals(Object rhs)
	
	/// Returns a strong reference of this string.
	[[override]]
	String toString()
	
	/**
	Returns a copy of this string instance.
	@see String.init(String source)
	*/
	String copy()
	
	/// Returns the size (or rather length) of the string.
	int size()
	/// Resizes the string to the specified size (excluding the null terminator).
	void resize(int size)
	/// Adjusts the string size to the first appearance of a null terminator.
	void adjust()
	
	/// Returns true if this string is empty, i.e. the string only contains the null terminator.
	bool empty()
	
	/**
	Appends the specified string at the end of this string.
	@return Weak reference to this string.
	*/
	String@ append(String rhs)
	/**
	Appends the string representation of the specified object at the end of this string.
	@return Weak reference to this string.
	@see Object.toString
	*/
	String@ append(Object rhs)
	/**
	Appends the specified value as string at the end of this string.
	@param rhs Specifies the boolean value which is to be appended. If true, "true" is appended, otherwise "false".
	@return Weak reference to this string.
	*/
	String@ append(bool rhs)
	/**
	Appends the specified value as string at the end of this string.
	@param rhs Specifies the integer value which is to be appended.
	@return Weak reference to this string.
	*/
	String@ append(int rhs)
	/**
	Appends the specified value as string at the end of this string.
	@param rhs Specifies the floating-point value which is to be appended.
	@return Weak reference to this string.
	*/
	String@ append(float rhs)
	
	/**
	Returns a sub-string of this string.
	@param from Specifies the start position from which the sub-string is to be fetched.
	@param length Specifies the length of the sub-string. If this is 'String.end',
	the length ranges to the end of this string. By default 'String.end'.
	@param New instance of the sub-string.
	*/
	String subString(int from, int length := String.end)
	
	/**
	Returns the position of the search string inside this string.
	@param search Specifies the sub-string to search for inside this string. This is case sensitive!
	@param from Specifies the start position from which the search shall begin.
	@return Position (beginning with zero) of the sub-string 'search',
	or 'String.end' if the sub-string could not be found.
	*/
	int find(String search, int from := 0)
	
	/**
	Replaces a character in this string at the specified position.
	@param pos Specifies the position where to replace the character.
	If this is out of range, the procedure call has no effect.
	@param char Specifies the new character value.
	*/
	void setChar(int pos, int char)
	/**
	Returns the character in this string at the specified position.
	@param pos Specifies the position where to read the character.
	@return The character in this string at position 'pos', or 0 if the position is out of range.
	*/
	int getChar(int pos)
	
	/// Returns true, if this string is equal to the string literal "true", and false otherwise.
	bool toBool()
	/// Returns the integer value of this string, or 0 if the string contains non-integer characters.
	int toInt()
	/// Returns the floating-point value of this string, or 0.0 if the string contains non-floating-point characters.
	float toFloat()
	
	/**
	Returns the raw pointer (as integer) which points to
	the first character in this null terminated string.
	@remarks This pointer is compliant to a 32-bit ANSI-C and ISO-C++ application.
	*/
	[[override, final]]
	int pointer()
	
}

/// Array class for pointers.
[[final]]
extern class Array {
	
	/// String end position.
	static const end := -1
	
	init()
	init(int size)
	
	[[override]]
	bool equals(Object rhs)
	
	Array copy()
	
	//! Returns the number of elements in the array
	int size()
	void resize(int size)
	
	bool empty()
	
	void append(Object entry)
	void insert(Object entry, int pos)
	bool remove(int pos)
	
	//! Returns the index (beginning from 0) for the entry or -1, if the array does not contain it
	int find(Object entry, int from := 0)
	bool contains(Object entry)
	
	//! Returns the raw pointer (as integer) of this array.
	[[override, final]]
	int pointer()
	
}

/// Array class for built-in integer data type.
[[final]]
extern class IntArray {
	//...
}

/// Array class for built-in floating-point data type.
[[final]]
extern class FloatArray {
	//...
}

/// Array class for built-in boolean data type.
[[final]]
extern class BoolArray {
	//...
}

/// General purpose buffer. This class manages a pointer.
[[final]]
extern class Buffer {
	
	init()
	/**
	Initializes the buffer with the specified 'size' (in bytes),
	and fills it with the value specified by 'fill'.
	*/
	init(int size, int fill := 0)
	
	[[override]]
	bool equals(Object rhs)
	
	Buffer copy()
	
	/// Returns the size (in bytes) of this buffer.
	int size()
	/// Resizes this buffer (in bytes).
	void resize(int size)
	
	void writeByte(int offset, int value)
	int readByte(int offset)
	
	void writeInt(int offset, int value)
	int readInt(int offset)
	
	void writeFloat(int offset, float value)
	float readFloat(int offset)
	
	//! Writes the specified sub buffer into this buffer.
	void writeBuffer(int offset, int size, Buffer buffer)
	//! Reads this buffer into the specified sub buffer.
	void readBuffer(int offset, int size, Buffer buffer)
	
	//! Returns the raw pointer (as integer) of this buffer.
	[[override, final]]
	int pointer()
	
}

/// Low-level intrinsic functions.
[[final]]
extern class Intrinsics {
	
	static int allocMem(int size)
	static void freeMem(int ptr)
	static void copyMem(int destPtr, int srcPtr, int size)
	
	static void sysCall(int commandPtr)
	static void print(int textPtr)
	static void printLn(int textPtr)
	static void printInt(int value)
	static void printFloat(float value)
	static void input(int stringPtr, int maxLen)
	static int inputInt()
	static float inputFloat()
	
	static int createFile(int filenamePtr)
	static int deleteFile(int filenamePtr)
	static int openFile(int filenamePtr, int modePtr)
	static void closeFile(int handlePtr)
	static void fileSetPos(int handlePtr, int offset, int origin)
	static int fileGetPos(int handlePtr)
	static int fileEOF(int handlePtr)
	static void writeByte(int handlePtr, int value)
	static void writeInt(int handlePtr, int value)
	static void writeFloat(int handlePtr, float value)
	static void writeBuffer(int handlePtr, int bufferPtr, int size)
	static int readByte(int handlePtr)
	static int readInt(int handlePtr)
	static float readFloat(int handlePtr)
	static void readBuffer(int handlePtr, int bufferPtr, int size)
	
	static int time()
	static void sleep(int duration)
	
}

/// Core math class.
[[final]]
extern class Math {
	
	/// Math constant PI (~3.14).
	static const pi := 3.14159265358979
	
	/// Math constant E (~2.71).
	static const e := 2.71828182845905
	
	static float sin(float x)
	static float cos(float x)
	static float tan(float x)
	static float asin(float x)
	static float acos(float x)
	static float atan(float x)
	static float pow(float b, float e)
	static float log(float x)
	static float log2(float x)
	static float log10(float x)
	static float sqrt(float x)
	
	static int randInt()
	static float randFloat()
	
}

