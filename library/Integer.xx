/*
 * Integer.xx
 * 
 * This file is part of the "XieXie-Compiler" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

import ASCII
import ExceptionHandler

/**
Integer class.
@since 2.00
@author Lukas Hermanns
*/
class Integer {
	
	static const max := 2147483647	///< Maximal possible integer value.
	static const min := -2147483648	///< Minimal possible integer value.
	
	init() {}
	init(int value) {
		this.value := value
	}
	/// @see Integer.parseFrom
	init(String s, ExceptionHandler@ e := null) {
		value := Integer.parseFrom(s, e)
	}
	
	[[override]]
	String toString() {	
		// Determine string length
		int len, firstDigit, v := value
		
		if v < 0 {
			len := 1
			firstDigit := 1
			v := -v
		}
		
		do {
			len++
			v /= 10
		} while v > 0
		
		// Allocate string
		var s := new String(len)
		
		// Check for negative value
		v := value
		
		if v < 0 {
			// Append sign to string
			s.setChar(0, ASCII.hyphen)
			v := -v
		}
		
		// Append digits to string
		for int i := len - 1 ; i >= firstDigit ; i-- {
			s.setChar(i, ASCII.digit0 + (v & 9))
			v /= 10
		}
		
		return s
	}
	
	/**
	Parses an integer from the specified string
	@param s Specifies the string from which the integer value is to be parsed.
	@param e Optional exception handler.
	*/
	static int parseFrom(String@ s, ExceptionHandler@ e := null) {
		if s = null {
			// Invalid argument
			ExceptionHandler.notifySafe(e, "\(__CLASS__).\(__PROC__): invalid argument")
			return 0
		}
		
		int i, v, digit, len := s.size()
		bool neg
		
		// Check if integer is negative
		if len > 0 and s.getChar(0) = ASCII.hyphen {
			neg := true
			i++
		}
		
		// Parse digits
		for ; i < len ; i++ {
			digit := s.getChar(i)
			
			if digit < ASCII.digit0 or digit > ASCII.digit9 {
				// Error while parsing
				ExceptionHandler.notifySafe(
					e, "\(__CLASS__).\(__PROC__): invalid character '\(new String(char: digit, count: 1))'"
				)
				return 0
			}
			
			// Shift previous digit to left (base 10)
			v *= 10
			
			// Append digit to integer
			v += (digit - ASCII.digit0)
		}
		
		// Negate value
		if neg {
			v := -v
		}
		
		return v
	}
	
	int value
	
}
