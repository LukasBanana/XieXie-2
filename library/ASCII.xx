/*
 * ASCII.xx
 * 
 * This file is part of the "XieXie-Compiler" (Copyright (c) 2014 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

/**
Original "Americal Standard Code for Information Interchange" (ASCII) enumeration with 128 elements.
@see http://www.ascii-code.com/
@since 2.00
@author Lukas Hermanns
*/
class ASCII {
	
	// Special characters
	static const NUL				:= 0x00	///< Null character
	static const SOH				:= 0x01	///< Start of Heading
	static const STX				:= 0x02	///< Start of Text
	static const ETX				:= 0x03	///< End of Text
	static const EOT				:= 0x04	///< End of Transmission
	static const ENQ				:= 0x05	///< Enquiry
	static const ACK				:= 0x06	///< Acknowledgment
	static const BEL				:= 0x07	///< Bell
	static const BS					:= 0x08	///< Back Space
	static const HT					:= 0x09	///< Horizontal Tabulator
	static const LF					:= 0x0a	///< Line Feed (or rather new-line character)
	static const VT					:= 0x0b	///< Vertical Tabulator
	static const FF					:= 0x0c	///< Form Feed
	static const CR					:= 0x0d	///< Carriage Return
	static const SO					:= 0x0e	///< Shift Out / X-On
	static const SI					:= 0x0f	///< Shift In / X-Off
	static const DLE				:= 0x10	///< Data Line Escape
	static const DC1				:= 0x11	///< Device Control 1 (oft. XON)
	static const DC2				:= 0x12	///< Device Control 2
	static const DC3				:= 0x13	///< Device Control 3 (oft. XOFF)
	static const DC4				:= 0x14	///< Device Control 4
	static const NAK				:= 0x15	///< Negative Acknowledgment
	static const SYN				:= 0x16	///< Synchronous Idle
	static const ETB				:= 0x17	///< End of Transmit Block
	static const CAN				:= 0x18	///< Cancel
	static const EM					:= 0x19	///< End of Medium
	static const SUB				:= 0x1a	///< Substitute
	static const ESC				:= 0x1b	///< Escape
	static const FS					:= 0x1c	///< File Separator
	static const GS					:= 0x1d	///< Group Separator
	static const RS					:= 0x1e	///< Record Separator
	static const US					:= 0x1f	///< Unit Separator
	
	// Punctuation
	static const space				:= 0x20 ///< Space ' '
	static const exclamationMark	:= 0x21 ///< Exclamation Mark '!'
	static const doubleQuotes		:= 0x22 ///< Double Quotes (or speech marks) '"'
	static const number				:= 0x23 ///< Number '#'
	static const dollar				:= 0x24 ///< Dollar '$'
	static const percent			:= 0x25 ///< Percent '%'
	static const ampersand			:= 0x26 ///< Ampersand '&'
	static const singleQuote		:= 0x27 ///< Single Quote '\''
	static const openBracket		:= 0x28 ///< Open Bracket '('
	static const closeBracket		:= 0x29 ///< Close Bracket ')'
	static const asterisk			:= 0x2a ///< Asterisk '*'
	static const plus				:= 0x2b	///< Plus '+'
	static const comma				:= 0x2c	///< Comma ','
	static const hyphen				:= 0x2d	///< Hyphen '-'
	static const period				:= 0x2e	///< Period '.'
	static const slash				:= 0x2f	///< Slash '/'
	
	// Digits
	static const digit0				:= 0x30 ///< Digit '0'
	static const digit1				:= 0x31 ///< Digit '1'
	static const digit2				:= 0x32 ///< Digit '2'
	static const digit3				:= 0x33 ///< Digit '3'
	static const digit4				:= 0x34 ///< Digit '4'
	static const digit5				:= 0x35 ///< Digit '5'
	static const digit6				:= 0x36 ///< Digit '6'
	static const digit7				:= 0x37 ///< Digit '7'
	static const digit8				:= 0x38 ///< Digit '8'
	static const digit9				:= 0x39 ///< Digit '9'
	
	// Further punctuation
	static const colon				:= 0x3a ///< Colon ':'
	static const semicolon			:= 0x3b ///< Semicolon ';'
	static const less				:= 0x3c ///< Less Then '<'
	static const equal				:= 0x3d ///< Euqal '='
	static const greater			:= 0x3e ///< Greater Then '>'
	static const questionMark		:= 0x3f ///< Question Mark '?'
	static const at					:= 0x40 ///< At '@'
	
	// Uppercases
	static const A					:= 0x41 ///< Uppercase 'A'
	static const B					:= 0x42 ///< Uppercase 'B'
	static const C					:= 0x43 ///< Uppercase 'C'
	static const D					:= 0x44 ///< Uppercase 'D'
	static const E					:= 0x45 ///< Uppercase 'E'
	static const F					:= 0x46 ///< Uppercase 'F'
	static const G					:= 0x47 ///< Uppercase 'G'
	static const H					:= 0x48 ///< Uppercase 'H'
	static const I					:= 0x49 ///< Uppercase 'I'
	static const J					:= 0x4a ///< Uppercase 'J'
	static const K					:= 0x4b ///< Uppercase 'K'
	static const L					:= 0x4c ///< Uppercase 'L'
	static const M					:= 0x4d ///< Uppercase 'M'
	static const N					:= 0x4e ///< Uppercase 'N'
	static const O					:= 0x4f ///< Uppercase 'O'
	static const P					:= 0x50 ///< Uppercase 'P'
	static const Q					:= 0x51 ///< Uppercase 'Q'
	static const R					:= 0x52 ///< Uppercase 'R'
	static const S					:= 0x53 ///< Uppercase 'S'
	static const T					:= 0x54 ///< Uppercase 'T'
	static const U					:= 0x55 ///< Uppercase 'U'
	static const V					:= 0x56 ///< Uppercase 'V'
	static const W					:= 0x57 ///< Uppercase 'W'
	static const X					:= 0x58 ///< Uppercase 'X'
	static const Y					:= 0x59 ///< Uppercase 'Y'
	static const Z					:= 0x5a ///< Uppercase 'Z'
	
	// Special characters
	static const openParen			:= 0x5b ///< Open Paren '['
	static const backslash			:= 0x5c ///< Backslash '\\'
	static const closeParen			:= 0x5d ///< Close Paren ']'
	static const caret				:= 0x5e ///< Caret/ Circumflex '^'
	static const underscore			:= 0x5f ///< Underscore '_'
	static const graveAccent		:= 0x60 ///< Grave Accent '`'
	
	// Lower case letters
	static const a					:= 0x61 ///< Lowercase 'a'
	static const b					:= 0x62 ///< Lowercase 'b'
	static const c					:= 0x63 ///< Lowercase 'c'
	static const d					:= 0x64 ///< Lowercase 'd'
	static const e					:= 0x65 ///< Lowercase 'e'
	static const f					:= 0x66 ///< Lowercase 'f'
	static const g					:= 0x67 ///< Lowercase 'g'
	static const h					:= 0x68 ///< Lowercase 'h'
	static const i					:= 0x69 ///< Lowercase 'i'
	static const j					:= 0x6a ///< Lowercase 'j'
	static const k					:= 0x6b ///< Lowercase 'k'
	static const l					:= 0x6c ///< Lowercase 'l'
	static const m					:= 0x6d ///< Lowercase 'm'
	static const n					:= 0x6e ///< Lowercase 'n'
	static const o					:= 0x6f ///< Lowercase 'o'
	static const p					:= 0x70 ///< Lowercase 'p'
	static const q					:= 0x71 ///< Lowercase 'q'
	static const r					:= 0x72 ///< Lowercase 'r'
	static const s					:= 0x73 ///< Lowercase 's'
	static const t					:= 0x74 ///< Lowercase 't'
	static const u					:= 0x75 ///< Lowercase 'u'
	static const v					:= 0x76 ///< Lowercase 'v'
	static const w					:= 0x77 ///< Lowercase 'w'
	static const x					:= 0x78 ///< Lowercase 'x'
	static const y					:= 0x79 ///< Lowercase 'y'
	static const z					:= 0x7a ///< Lowercase 'z'
	
	// Special characters
	static const openBrace			:= 0x7b ///< Open Brace/ Curly Brakcet '{'
	static const verticalBar		:= 0x7c ///< Vertical Bar '|'
	static const closeBrace			:= 0x7d ///< Open Brace/ Curly Brakcet '}'
	static const tilde				:= 0x7e ///< Tilde/ Equivalence Sign '~'
	static const delete				:= 0x7f ///< Delete
	
	/// Returns the lower-case character of 'c'.
	static int toLower(int c) {
		if c >= ASCII.A and c <= ASCII.Z {
			c += (ASCII.a - ASCII.A)
		}
		return c
	}
	
	/// Returns a new instance of the string 's' in lower-case.
	static String toLower(String s) {
		var r := s.copy()
		for int i, n := r.size() ; i < n ; i++ {
			r.setChar(i, ASCII.toLower(r.getChar(i)))
		}
		return r
	}
	
	/// Returns the upper-case character of 'c'.
	static int toUpper(int c) {
		if c >= ASCII.a and c <= ASCII.z {
			c -= (ASCII.a - ASCII.A)
		}
		return c
	}
	
	/// Returns a new instance of the string 's' in upper-case.
	static String toUpper(String s) {
		var r := s.copy()
		for int i, n := r.size() ; i < n ; i++ {
			r.setChar(i, ASCII.toUpper(r.getChar(i)))
		}
		return r
	}
	
}

