;
; Core.xasm
; 
; This file is part of the "XieXie 2.0 Project" (Copyright (c) 2014 by Lukas Hermanns)
; See "LICENSE.txt" for license information.
;

; Export all global addresses
;.pragma("export all")

.define TRUE			1	; True boolean value
.define FALSE			0	; False boolean value

.define NULL			0	; Null pointer value

.define FIELD_REFCOUNT	0	; Class field "refCount"
.define FIELD_TYPEID	4	; Class field "typeID"
.define FIELD_VTABLE	8	; Class field "vtableAddr"

.define FIELD_SIZE		12	; Class field "size"
.define FIELD_BUFSIZE	16	; Class field "bufSize"
.define FIELD_BUFFER	20	; Class field "buffer"

.define TYPEID_OBJECT	0	; Object.typeID
.define TYPEID_STRING	1	; String.typeID
.define TYPEID_ARRAY	2	; Array.typeID
; ...

.define SIZEOF_STRING	24	; sizeof(String)
; ...

.define MIN_BUFSIZE		32	; Minimal buffer size (in bytes)

; ------- Common -------

; void exit(void)
exit:
	stop

; Object new(int size, int typeID, int vtableAddr)
;   after return:
;    - $r0 is invalidated
;    - $ar contains the new allocated object
new:
	ldw $r0, ($lb) -4				; load argument 'size' (must include 12 bytes for reference counter, type-id, and vtable)
	push $r0
	insc AllocMem					; allocate memory for object and get object reference (ar)
	
	mov $r0, 1						; initialize reference counter to 1
	stw $r0, ($ar) %FIELD_REFCOUNT	; write reference counter to object
	
	ldw $r0, ($lb) -8				; load argument 'typeID'
	stw $r0, ($ar) %FIELD_TYPEID	; write type-id to object
	
	ldw $r0, ($lb) -12				; load argument 'vtableAddr' (address to vtable for the object)
	stw $r0, ($ar) %FIELD_VTABLE	; write vtable address to object
	
	ret 3							; return object reference (ar)

; void inc_ref({Object this})
inc_ref:
	; check for null pointer
	mov $cf, $xr						; compare: this = null
	je .end
		; increment reference
		ldw $r0, ($xr) %FIELD_REFCOUNT	; load reference counter from object
		inc $r0							; increment reference counter
		stw $r0, ($xr) %FIELD_REFCOUNT	; write reference counter back to object
	.end:
	ret

; void dec_ref({Object this})
dec_ref:
	; check for null pointer
	mov $cf, $xr						; compare: this = null
	je .end
	
	; check: ref-count = 1
	ldw $r0, ($xr) %FIELD_REFCOUNT		; load reference counter from object
	cmp $r0, 1							; check if reference is 1
	je .rel								; release object
		dec $r0							; decrement reference counter
		stw $r0, ($xr) %FIELD_REFCOUNT	; write reference counter back to object
		ret
	.rel:
	
	; load d'tor address
	ldw $r0, ($xr) %FIELD_VTABLE		; load vtable address
	ldw $r0, ($r0) 0					; load release procedure address
	
	; call d'tor
	push $xr							; store $xr
	call $r0							; call d'tor 'release(this)'
	;pop $xr							; restore $xr
	
	; free memory
	;push $xr							; push this pointer again as argument onto stack
	insc FreeMem						; delete object 'FreeMem(this)'
	
	.end:
	ret

; Object dynamic_cast(Object obj, int baseTypeID, int castNumSubClasses)
dynamic_cast:
	ldw $cf, ($lb) -4				; load object reference 'obj'
	
	; check for null pointer
	je .end							; compare: obj = null
	
	; load type ids
	mov $ar, $cf
	ldw $r1, ($ar) %FIELD_TYPEID	; load type-id of 'obj'
	ldw $r2, ($lb) -8				; load 'baseTypeID'
	ldw $r3, ($lb) -12				; load number of sub classes 'castNumSubClasses'
	add $r3, $r3, $r2				; calculate: baseTypeID + castNumSubClasses
	
	; compare type-ids
	cmp $r2, $r1					; compare: baseTypeID > obj.typeID
	jg .end
		cmp $r1, $r3				; compare: obj.typeID > (baseTypeID + castNumSubClasses)
		jg .end
			ret 3					; return object reference (ar)
			
	; class-cast exception
	.end:
	mov $ar, %NULL					; return null pointer
	ret 3

; void resize_buffer({Object this} int size)
;   after return:
;    - $r0 will contain the argument of 'size'
resize_buffer:
	ldw $r0, ($lb) -4					; load size
	ldw $r1, ($xr) %FIELD_BUFSIZE		; load this.bufSize
	
	; check if buffer must be increased (size > this.bufSize)
	cmp $r0, $r1
	jle .else
		; get further member variables
		ldw $r2, ($xr) %FIELD_SIZE		; load this.size
		ldw $r3, ($xr) %FIELD_BUFFER	; load this.buffer
		
		; increase buffer (2x size pre-allocated storage)
		sll $r4, $r0, 1					; set newSize := size*2
		push $r4
		insc AllocMem					; allocate memory for 'newSize' bytes
		
		; store new values in object
		stw $ar, ($xr) %FIELD_BUFFER	; store: this.buffer := newBuffer
		stw $r4, ($xr) %FIELD_BUFSIZE	; store: this.bufSize := newSize
		
		; copy previous buffer into new one
		push $r2						; push previous buffer size
		push $r3						; push original buffer as source address
		push $ar						; push new buffer as destination address
		insc CopyMem
		
		; free previous buffer
		push $r3
		insc FreeMem
		
		; fill new elements with zeros
		push 0							; fill with zeros
		sub $r3, $r0, $r2				; fillSize := size - prevSize
		push $r3
		add $r3, $ar, $r2				; get address: newBuffer + prevSize
		push $r3
		insc FillMem
	jmp .end
	.else:
	
	; check if buffer should be decreased (size < this.bufSize/2)
	slr $r1, $r1, 1
	cmp $r0, $r1
	jge .end
		; get further member variables
		ldw $r2, ($xr) %FIELD_SIZE		; load this.size
		ldw $r3, ($xr) %FIELD_BUFFER	; load this.buffer
		
		; clamp newSize to MIN_BUFSIZE
		mov $r1, $r0
		cmp $r1, %MIN_BUFSIZE			; check: newSize >= MIN_BUFSIZE
		jge .gt_min
			mov $r1, %MIN_BUFSIZE		; set newSize := MIN_BUFSIZE
		.gt_min:
		
		; decrease buffer
		push $r1						; push new buffer size
		insc AllocMem					; allocate memory for 'size' bytes
		
		; store new values in object
		stw $ar, ($xr) %FIELD_BUFFER	; store: this.buffer := newBuffer
		stw $r1, ($xr) %FIELD_BUFSIZE	; store: this.bufSize := newSize
		
		; copy previous buffer into new one
		push $r0						; push new buffer size
		push $r3						; push original buffer as source address
		push $ar						; push new buffer as destination address
		insc CopyMem
		
		; free previous buffer
		push $r3
		insc FreeMem
	.end:
	
	stw $r0, ($xr) %FIELD_SIZE			; store: this.size := size
	
	ret 1

; String String.copy_literal(String literal)
String.copy_literal:
	; allocate new "String" object
	ldw $r0, ($lb) -4					; load address of string literal
	push 24
	insc AllocMem						; allocate memory for new string instance
	mov $xr, $ar						; store pointer to new string object
	push $r0
	call CString.Pinit,R@String?source	; call copy constructor
	mov $ar, $xr						; restore and return pointer to new string object
	ret 1


; ------- Object Class -------

; Object:
;	int refCount	(0)
;	int typeID		(4)
;	int vtableAddr	(8)

; void Object.release()
CObject.Prelease:

; void Object.init()
CObject.Pinit:
	ret

; int Object.refCount()
CObject.PrefCount:
	ldw $ar, ($xr) %FIELD_REFCOUNT	; load and return reference counter of 'this'
	ret

; int Object.typeID()
CObject.PtypeID:
	ldw $ar, ($xr) %FIELD_TYPEID	; load and return type-id of 'this'
	ret

; bool Object.equals(Object rhs)
CObject.Pequals,R@Object?rhs:
	; check for null pointer
	ldw $cf, ($lb) -4				; load object reference 'rhs' and compare: rhs = null
	je .false
	
	; load type ids
	ldw $r0, ($xr) %FIELD_TYPEID	; load type-id of 'this'
	ldw $r1, ($cf) %FIELD_TYPEID	; load type-id of 'rhs'
	
	; check: this.typeID = rhs.typeID
	cmp $r0, $r1					; compare type-id of both object references
	jne .false
		mov $ar, %TRUE				; return true
		ret 1
	.false:
	mov $ar, %FALSE					; return false
	ret 1

; TODO: currently returns null pointer !!!
; String Object.toString()
CObject.PtoString:
	mov $ar, %NULL	; return null pointer
	ret

; int Object.pointer()
CObject.Ppointer:
	add $ar, $xr, 12	; return pointer to first member variable of derived class
	ret

Object.vtable:
	.word @CObject.Prelease
	.word @CObject.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CObject.Pequals,R@Object?rhs
	.word @CObject.PtoString
	.word @CObject.Ppointer


; ------- String Class -------

; String:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; void String.release()
CString.Prelease:
	; free string buffer
	ldw $r0, ($xr) %FIELD_BUFFER	; load pointer to string buffer
	push $r0
	insc FreeMem					; delete string buffer
	ret

; void String.init()
CString.Pinit:
	; this.size := 1 (for null character)
	mov $r0, 1
	stw $r0, ($xr) %FIELD_SIZE		; store this.size
	
	; initialize string buffer of MIN_BUFSIZE bytes
	mov $r1, %MIN_BUFSIZE
	stw $r1, ($xr) %FIELD_BUFSIZE	; store this.bufSize
	
	; allocate string buffer
	push %MIN_BUFSIZE
	insc AllocMem					; allocate MIN_BUFSIZE bytes
	stw $ar, ($xr) %FIELD_BUFFER	; store pointer to buffer in string instance
	
	; initialize string buffer with null terminator
	stw $r0, ($ar) 0				; this.pointer[0] := 0
	ret

; bool String.equals(Object rhs)
CString.Pequals,R@Object?rhs:
	; check for null pointer
	ldw $cf, ($lb) -4		; load object reference 'rhs' and compare: rhs = null
	je .false
	
	; compare type-id of both object references
	mov $tr, $cf
	ldw $r0, ($xr) %FIELD_TYPEID	; load type-id of 'this'
	ldw $r1, ($tr) %FIELD_TYPEID	; load type-id of 'rhs'
	cmp $r0, $r1					; check: this.typeID != rhs.typeID	
	jne .false
	
	; compare size of both object references
	ldw $r0, ($xr) %FIELD_SIZE		; load this.size
	ldw $r1, ($tr) %FIELD_SIZE		; load rhs.size
	cmp $r0, $r1					; check: this.size != rhs.size
	jne .false
	
	; compare characters of both string
	ldw $r2, ($xr) %FIELD_BUFFER	; set ptrA := this.buffer
	ldw $r3, ($tr) %FIELD_BUFFER	; set ptrB := rhs.buffer
	.loop:
		; loop break condition
		mov $cf, $r0
		jle .break					; check if size <= 0
		
		; compare current two characters on equality
		ldw $r4, ($r2) 0			; chrA := load ptrA[i]
		ldw $r5, ($r3) 0			; chrB := load ptrB[i]
		cmp $r4, $r5				; check chrA != chrB
		jne .false
		
		; next iteration
		inc $r2						; ptrA++
		inc $r3						; ptrB++
		dec $r0						; size--
		jmp .loop
	.break:
	
	; return true
	mov $ar, %TRUE
	ret 1
	
	; return false
	.false:
	mov $ar, %FALSE
	ret 1

; void String.init(int size)
CString.Pinit,I?size:
	call CString.Pinit
	ldw $r0, ($lb) -4
	push $r0
	call CString.Presize,I?size
	ret 1

; void String.init(int char, int count)
CString.Pinit,I?char,I?count:
	; load arguments
	ldw $r0, ($lb) -4				; load char
	ldw $r1, ($lb) -8				; load count
	
	; clamp char to [0 .. 127]
	mov $cf, $r0
	jge .char_gz					; compare char >= 0
		mov $r0, 0					; set: char := 0
		jmp .clamped_char
	.char_gz:
	cmp $r0, 127
	jle .clamped_char				; compare char <= 127
		mov $r0, 0					; set: char := 0 (out of range always to zero!)
	.clamped_char:
	
	; clamp count to 0+
	mov $cf, $r1
	jge .clamped_count
		mov $r1, 0
	.clamped_count:
	
	; setup string buffer size
	add $r2, $r1, 1					; set this.size := count + 1
	stw $r2, ($xr) %FIELD_SIZE		; store this.size
	cmp $r2, %MIN_BUFSIZE
	jge .gt_min						; compare this.size >= MIN_BUFSIZE
		mov $r2, %MIN_BUFSIZE
	.gt_min:
	stw $r2, ($xr) %FIELD_BUFSIZE	; store this.bufSize
	
	; allocate string buffer
	push $r2
	insc AllocMem					; allocate 16 bytes
	mov $r3, $ar					; store buffer
	stw $r3, ($xr) %FIELD_BUFFER	; store this.buffer
	
	; initialize string buffer with characters
	mov $cf, $r1
	.loop:
		jle .end					; compare count <= 0
		stb $r0, ($r3) 0			; store *buffer := char
		inc $r3						; buffer++
		dec $cf						; count--
		jmp .loop
	.end:
	
	; store null terminator
	mov $tr, 0						; tmp := 0
	stw $tr, ($r3) 0				; this.buffer[this.size] := tmp
	
	ret 2

; void String.init(String source)
CString.Pinit,R@String?source:
	; validate argument
	ldw $cf, ($lb) -4				; load source
	je .end							; check: source = null
	
	; copy first 20 bytes from literal
	push 20							; push size of 20 bytes (excluding the '.buffer' address)
	push $cf						; push source address of original string literal
	push $xr						; push this pointer as destination address
	insc CopyMem
	
	; allocate buffer for new string
	ldw $r1, ($cf) %FIELD_SIZE		; load 'source.size'
	push $r1
	insc AllocMem					; allocate buffer
	stw $ar, ($xr) %FIELD_BUFFER	; write buffer address to new string object
	
	; copy string buffer from literal
	ldw $cf, ($cf) %FIELD_BUFFER	; load buffer address from literal
	push $r1						; push buffer size
	push $cf						; push buffer address of literal
	push $ar						; push buffer address of new string
	insc CopyMem
	
	.end:
	ret 1

; void String.init(String source, int from, int length)
CString.Pinit,R@String?source,I?from,I?length:
	; validate arguments
	ldw $cf, ($lb) -4				; load source
	je .break						; check: source = null
	mov $r0, $cf
	ldw $cf, ($lb) -8				; load from
	jl .break						; check: from < 0
	mov $r1, $cf
	ldw $cf, ($lb) -12				; load length
	jge .not_neg					; check: length >= 0
		ldw $cf, ($r0) %FIELD_SIZE	; set: length := source.size
		dec $cf						; length--
		sub $cf, $cf, $r1			; length -= from
	.not_neg:
	mov $r2, $cf
	ldw $r3, ($r0) %FIELD_SIZE		; load source.size
	add $r4, $r1, $r2				; compute: t := from + length
	inc $r4							; t++
	cmp $r4, $r3					; check: t > source.size
	jg .break
	
	; store member variables for new string
	add $r4, $r2, 1					; set: t := length + 1
	stw $r4, ($xr) %FIELD_SIZE		; store this.size := t
	cmp $r4, %MIN_BUFSIZE			; check: this.bufSize >= MIN_BUFSIZE
	jge .gt_min
		mov $r4, %MIN_BUFSIZE		; clamp this.bufSize to MIN_BUFSIZE
	.gt_min:
	stw $r4, ($xr) %FIELD_BUFSIZE	; store this.bufSize
	
	; allocate buffer for new string
	push $r4
	insc AllocMem					; allocate buffer
	stw $ar, ($xr) %FIELD_BUFFER	; write buffer address to new string object
	
	; copy string buffer from literal
	ldw $r0, ($r0) %FIELD_BUFFER	; load buffer address from literal
	add $r0, $r0, $r1				; add offset 'from' to buffer
	push $r2						; push buffer size
	push $r0						; push buffer address of literal
	push $ar						; push buffer address of new string
	insc CopyMem
	
	; store null terminator
	mov $r0, 0
	add $r1, $ar, $r2				; get offset t := this.buffer + length
	stb $r0, ($r1) 0				; store *t := 0
	ret 3
	
	; initialize empty string
	.break:
	call CString.Pinit
	ret 3

; String String.toString()
CString.PtoString:
	call inc_ref	; increment reference of this (return strong this)
	mov $ar, $xr	; just return this pointer
	ret

; int String.pointer()
CString.Ppointer:
CArray.Ppointer:
CIntArray.Ppointer:
CFloatArray.Ppointer:
CBoolArray.Ppointer:
CBuffer.Ppointer:
	ldw $ar, ($xr) %FIELD_BUFFER	; load and return member this.buffer
	ret

; String String.copy()
CString.Pcopy:
	; allocate new String instance
	push @String.vtable					; push String vtable
	push %TYPEID_STRING					; push String type-id
	push %SIZEOF_STRING					; push String size
	call new							; allocate new String
	
	; call String's copy c'tor
	push $ar							; store $ar
	push $xr							; push this pointer as argument 'source'
	mov $xr, $ar						; override this pointer with reference to new String instance
	call CString.Pinit,R@String?source	; call String copy constructor
	
	; return new String instance
	pop $ar								; restore $ar
	ret

; int String.size()
CString.Psize:
	ldw $ar, ($xr) %FIELD_SIZE	; load and return member this.size
	dec $ar						; remove null terminator from character counter
	ret

; void String.resize(int size)
CString.Presize,I?size:
	ldw $cf, ($lb) -4					; load size
	jge .else							; check: size >= 0
		mov $cf, 0						; clamp size to 0
	.else:
	add $tr, $cf, 1						; set tr := size + 1 (null terminator)
	ldw $cf, ($xr) %FIELD_SIZE			; load this.size
	cmp $cf, $tr						; compare this.size = size
	je .end
		push $tr
		call resize_buffer				; resize string buffer
		ldw $r0, ($xr) %FIELD_BUFFER	; load this.buffer
		add $r0, $r0, $tr				; add offset to buffer ($tr is not modified by "resize_buffer")
		mov $tr, 0
		stw $tr, ($r0) -1				; store null terminator at this.buffer[tr - 1]
	.end:
	ret 1

; void String.adjust()
CString.Padjust:
	ldw $r0, ($xr) %FIELD_SIZE		; load this.size
	ldw $r1, ($xr) %FIELD_BUFFER	; load this.buffer
	
	; iterate over string buffer until null terminator is found
	mov $r2, 0						; set i := 0
	.loop:
		cmp $r2, $r0				; compare i >= this.size
		jge .break
		ldw $cf, ($r1) 0			; load character from buffer
		je .break					; break loop if null terminator is found
		inc $r2						; i++
		inc $r1						; buffer++
		jmp .loop
	.break:
	
	; resize string buffer
	push $r2
	call CString.Presize,I?size	; call String.resize(i)
	ret

; bool String.empty()
CString.Pempty:
	ldw $cf, ($xr) %FIELD_SIZE	; load this.size
	dec $cf
	jg .false					; compare this.size > 1
		mov $ar, %TRUE			; return true
		ret
	.false:
	mov $ar, %FALSE				; return false
	ret

; String String.append(String rhs)
CString.Pappend,R@String?rhs:
	; validate argument
	ldw $cf, ($lb) -4				; load rhs
	je .end							; check if rhs = null
	mov $r0, $cf					; store rhs
	cmp $xr, $r0					; check if rhs = this
	je .end
	
	; check if other string is empty
	ldw $r1, ($r0) %FIELD_SIZE		; load rhs.size
	cmp $r1, 1						; check: rhs.size <= 1
	jle .end
	
	; determine new string size
	ldw $r2, ($xr) %FIELD_SIZE		; load this.size
	add $r1, $r1, $r2				; calculate size := this.size + rhs.size
	sub $r1, $r1, 2					; subtract 2 from size because of both null terminators
	
	; resize this string
	push $r2						; store this.size
	push $r0						; store rhs
	push $r1
	call CString.Presize,I?size
	pop $r0							; restore rhs
	pop $r1							; restore this.size
	
	; copy other string into new buffer part
	ldw $r2, ($xr) %FIELD_BUFFER	; load this.buffer
	ldw $r3, ($r0) %FIELD_SIZE		; reload rhs.size
	ldw $r4, ($r0) %FIELD_BUFFER	; load rhs.buffer
	dec $r1							; decrement this.size because of null terminator
	dec $r3							; decrement rhs.size because of null terminator
	add $r2, $r2, $r1				; add offset to buffer
	push $r3						; push buffer size
	push $r4						; push source buffer
	push $r2						; push destination buffer
	insc CopyMem					; copy string part
	
	.end:
	mov $ar, $xr					; return weak reference of this
	ret 1

; String String.append(Object rhs)
CString.Pappend,R@Object?rhs:
	ldw $cf, ($lb) -4					; load rhs
	je .end								; check if rhs = null
	
	; call rhs.toString()
	ldw $cf, ($cf) %FIELD_VTABLE		; load rhs.vtable
	ldw $cf, ($cf) %FIELD_BUFFER		; load rhs.vtable.toString
	call $cf							; call rhs.vtable.toString()
	
	; call this.append(String)
	push $ar							; store $ar
	push $ar							; push $ar as argument for this.append($ar)
	call CString.Pappend,R@String?rhs
	
	; decrement reference of temporary string from rhs.toString call
	pop $xr
	call dec_ref						; call rhs.dec_ref
	
	.end:
	ret 1

; String String.append(bool rhs)
CString.Pappend,B?rhs:
	; ...
	ret 1

; String String.append(int rhs)
CString.Pappend,I?rhs:
	; ...
	ret 1

; String String.append(float rhs)
CString.Pappend,F?rhs:
	; ...
	ret 1

; String String.subString(int from, int length)
CString.PsubString,I?from,I?length:
	; allocate new String instance
	push @String.vtable									; push String vtable
	push %TYPEID_STRING									; push String type-id
	push %SIZEOF_STRING									; push String size
	call new											; allocate new String
	
	; call String's copy c'tor
	ldw $r0, ($lb) -4									; load from
	ldw $r1, ($lb) -8									; load length
	push $ar											; store $ar
	push $r1											; push length
	push $r0											; push from
	push $xr											; push this pointer as argument 'source'
	mov $xr, $ar										; override this pointer with reference to new String instance
	call CString.Pinit,R@String?source,I?from,I?length	; call String copy constructor
	
	; return new String instance
	pop $ar												; restore $ar
	ret 2

; int String.find(String search, int from)
CString.Pfind,R@String?search,I?from:
	; ...
	mov $ar, -1 ; !!!
	ret 2

; void String.setChar(int pos, int char)
CString.PsetChar,I?pos,I?char:
	; validate argument
	ldw $cf, ($lb) -4				; load pos
	jl .end							; check: pos < 0
	mov $r0, $cf					; store pos in $r0
	ldw $r1, ($xr) %FIELD_SIZE		; load this.size
	cmp $r0, $r1					; check: pos >= this.size
	jge .end
	ldw $r1, ($lb) -8				; load char
	
	; store character at position 'pos'
	ldw $r2, ($xr) %FIELD_BUFFER	; load this.buffer
	add $r2, $r2, $r0				; add offset to buffer
	stb $r1, ($r2) 0				; store character to buffer
	
	.end:
	ret 2

; int String.getChar(int pos)
CString.PgetChar,I?pos:
	; validate argument
	ldw $cf, ($lb) -4				; load pos
	jl .end							; check: pos < 0
	mov $r0, $cf					; store pos in $r0
	ldw $r1, ($xr) %FIELD_SIZE		; load this.size
	cmp $r0, $r1					; check: pos >= this.size
	jge .end
	
	; load character at position 'pos'
	ldw $r2, ($xr) %FIELD_BUFFER	; load this.buffer
	add $r2, $r2, $r0				; add offset to buffer
	ldb $ar, ($r2) 0				; load character from buffer
	ret 1
	
	; return invalid character
	.end:
	mov $ar, 0
	ret 1

String.vtable:
	.word @CString.Prelease
	.word @CString.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CString.Pequals,R@Object?rhs
	.word @CString.PtoString
	.word @CString.Ppointer
	.word @CString.Pinit,I?size
	.word @CString.Pinit,I?char,I?count
	.word @CString.Pinit,R@String?source
	.word @CString.Pinit,R@String?source,I?from,I?length
	.word @CString.Pcopy
	.word @CString.Psize
	.word @CString.Presize,I?size
	.word @CString.Padjust
	.word @CString.Pempty
	.word @CString.Pappend,R@String?rhs
	.word @CString.Pappend,R@Object?rhs
	.word @CString.Pappend,B?rhs
	.word @CString.Pappend,I?rhs
	.word @CString.Pappend,F?rhs
	.word @CString.PsubString,I?from,I?length
	.word @CString.Pfind,R@String?search,I?from
	.word @CString.PsetChar,I?pos,I?char
	.word @CString.PgetChar,I?pos


; ------- Array Class -------
; built-in array for objects

; Array:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; void Array.release()
CArray.Prelease:
	; load object members
	ldw $r0, ($xr) %FIELD_SIZE		; load this.size
	ldw $r1, ($xr) %FIELD_BUFFER	; load pointer to array buffer
	
	; de-reference all objects in array
	push $r1						; store pointer
	mov $xr, $r1					; set iterator to pointer: it := this.buffer
	sll $r0, $r0, 2					; calculate: size := this.size * 4
	add $r0, $r0, $xr				; determine end iterator: itEnd := it + size
	.loop:
		cmp $xr, $r0				; compare: it >= itEnd
		jge .break
		
		; store registers
		push $xr
		push $r0
		
		; decrement reference counter
		call dec_ref
		
		; restore registers
		pop $r0
		pop $xr
		
		; next loop iteration
		add $xr, $xr, 4				; it += 4
		jmp .loop
	.break:
	
	; free array buffer
	;pop $r1						; restore pointer
	;push $r1						; push pointer back onto stack
	insc FreeMem					; delete array buffer
	ret

; void Array.init()
CArray.Pinit:
CIntArray.Pinit:
CFloatArray.Pinit:
CBoolArray.Pinit:
CBuffer.Pinit:
	; this.size := 0
	mov $r0, 0
	stw $r0, ($xr) %FIELD_SIZE		; store this.size
	
	; initialize buffer with MIN_BUFSIZE bytes
	mov $r1, %MIN_BUFSIZE
	stw $r1, ($xr) %FIELD_BUFSIZE	; store this.bufSize
	
	; allocate buffer
	push %MIN_BUFSIZE
	insc AllocMem					; allocate MIN_BUFSIZE bytes
	stw $ar, ($xr) %FIELD_BUFFER	; store pointer to buffer in array instance
	ret

; void Array.init(int size)
CArray.Pinit,I?size:
CIntArray.Pinit,I?size:
CFloatArray.Pinit,I?size:
	; this.size := size
	ldw $r0, ($lb) -4				; load size
	sll $r0, $r0, 2					; set this.size := size * 4
	stw $r0, ($xr) %FIELD_SIZE		; store this.size
	
	; initialize buffer with at least MIN_BUFSIZE bytes
	cmp $r0, %MIN_BUFSIZE			; compare size >= MIN_BUFSIZE
	jge .gt_min
		mov $r0, %MIN_BUFSIZE		; clamp this.bufSize to MIN_BUFSIZE
	.gt_min:
	stw $r0, ($xr) %FIELD_BUFSIZE	; store this.bufSize
	
	; allocate buffer
	push $r0
	insc AllocMem					; allocate MIN_BUFSIZE bytes
	stw $ar, ($xr) %FIELD_BUFFER	; store pointer to buffer in array instance
	
	; initialize buffer
	push 0							; push fill
	push $r0						; push bufSize
	push $ar						; push buffer
	insc FillMem					; call FillMem(buffer, bufSize, 0)
	
	ret 1

; bool Array.equals(Object rhs)
CArray.Pequals,R@Object?rhs:
	; ...
	ret 1

; String Array.toString()
CArray.PtoString:
	; ...
	ret

; Array Array.copy()
CArray.Pcopy:
CIntArray.Pcopy:
CFloatArray.Pcopy:
	; ...
	ret

; int Array.size()
CArray.Psize:
CIntArray.Psize:
CFloatArray.Psize:
	ldw $ar, ($xr) %FIELD_SIZE	; load this.size
	slr $ar, $ar, 2				; return this.size/4
	ret

; void Array.resize(int size)
CArray.Presize,I?size:
CIntArray.Presize,I?size:
CFloatArray.Presize,I?size:
	ldw $cf, ($lb) -4			; load size
	jge .else					; check: size >= 0
		mov $cf, 0				; clamp size to 0
	.else:
	sll $tr, $cf, 2				; set tr := size*4
	ldw $cf, ($xr) %FIELD_SIZE	; load this.size
	cmp $cf, $tr				; compare this.size = size
	je .end
		push $tr
		call resize_buffer		; resize array buffer
	.end:
	ret 1

; bool Array.empty()
CArray.Pempty:
CIntArray.Pempty:
CFloatArray.Pempty:
	ldw $cf, ($xr) %FIELD_SIZE	; load this.size
	jg .false					; compare this.size > 0
		mov $ar, %TRUE			; return true
		ret
	.false:
	mov $ar, %FALSE				; return false
	ret

; void Array.append(Object entry)
CArray.Pappend,R@Object?entry:
CIntArray.Pappend,I?entry:
CFloatArray.Pappend,F?entry:
	; resize array by one entry
	ldw $r0, ($xr) %FIELD_SIZE		; load this.size
	push $r0						; store previous size
	add $r0, $r0, 4					; increment size += 4
	push $r0
	call resize_buffer				; call resize_buffer(this, size)
	
	; store new entry at the end of the buffer
	pop $r0							; restore previous size
	ldw $r1, ($xr) %FIELD_BUFFER	; load this.buffer
	add $r1, $r1, $r0				; get buffer end pointer
	ldw $r0, ($lb) -4				; load entry
	stw $r0, ($r1) 0				; store buffer[size] := entry
	
	ret 1

; void Array.insert(Object entry, int pos)
CArray.Pinsert,R@Object?entry,I?pos:
	; ...
	ret 2

; bool Array.remove(int pos)
CArray.Premove,I?pos:
CIntArray.Premove,I?pos:
CFloatArray.Premove,I?pos:
	; ...
	ret 1

; int Array.find(Object entry, int from)
CArray.Pfind,R@Object?entry,I?from:
	; ...
	ret 2

; bool Array.contains(Object entry)
CArray.Pcontains,R@Object?entry:
	; ...
	ret 1

Array.vtable:
	.word @CArray.Prelease
	.word @CArray.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CArray.Pequals,R@Object?rhs
	.word @CArray.PtoString
	.word @CArray.Ppointer
	.word @CArray.Pinit,I?size
	.word @CArray.Pcopy
	.word @CArray.Psize
	.word @CArray.Presize,I?size
	.word @CArray.Pempty
	.word @CArray.Pappend,R@Object?entry
	.word @CArray.Pinsert,R@Object?entry,I?pos
	.word @CArray.Premove,I?pos
	.word @CArray.Pfind,R@Object?entry,I?from
	.word @CArray.Pcontains,R@Object?entry


; ------- IntArray Class -------
; built-in array for built-in type 'int'

; IntArray:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; void IntArray.release()
CIntArray.Prelease:
CFloatArray.Prelease:
CBoolArray.Prelease:
CBuffer.Prelease:
	; free buffer
	ldw $r0, ($xr) %FIELD_BUFFER	; load this.buffer
	push $r0
	insc FreeMem					; FreeMem(this.buffer)
	ret

; bool IntArray.equals(Object rhs)
CIntArray.Pequals,R@Object?rhs:
	; ...
	ret 1

; String IntArray.toString()
CIntArray.PtoString:
	; ...
	ret

; void IntArray.insert(int entry, int pos)
CIntArray.Pinsert,I?entry,I?pos:
	; ...
	ret 2

; int IntArray.find(int entry, int from)
CIntArray.Pfind,I?entry,I?from:
	; ...
	ret 2

; bool IntArray.find(int entry)
CIntArray.Pcontains,I?entry:
	; ...
	ret 1

IntArray.vtable:
	.word @CIntArray.Prelease
	.word @CIntArray.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CIntArray.Pequals,R@Object?rhs
	.word @CIntArray.PtoString
	.word @CIntArray.Ppointer
	.word @CIntArray.Pinit,I?size
	.word @CIntArray.Pcopy
	.word @CIntArray.Psize
	.word @CIntArray.Presize,I?size
	.word @CIntArray.Pempty
	.word @CIntArray.Pappend,I?entry
	.word @CIntArray.Pinsert,I?entry,I?pos
	.word @CIntArray.Premove,I?pos
	.word @CIntArray.Pfind,I?entry,I?from
	.word @CIntArray.Pcontains,I?entry


; ------- FloatArray Class -------
; built-in array for built-in type 'float'

; FloatArray:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; bool FloatArray.equals(Object rhs)
CFloatArray.Pequals,R@Object?rhs:
	; ...
	ret 1

; String FloatArray.toString()
CFloatArray.PtoString:
	; ...
	ret

; void FloatArray.insert(float entry, int pos)
CFloatArray.Pinsert,F?entry,I?pos:
	; ...
	ret 2

; int FloatArray.find(float entry, int from)
CFloatArray.Pfind,F?entry,I?from:
	; ...
	ret 2

; bool FloatArray.find(float entry)
CFloatArray.Pcontains,F?entry:
	; ...
	ret 1

FloatArray.vtable:
	.word @CFloatArray.Prelease
	.word @CFloatArray.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CFloatArray.Pequals,R@Object?rhs
	.word @CFloatArray.PtoString
	.word @CFloatArray.Ppointer
	.word @CFloatArray.Pinit,I?size
	.word @CFloatArray.Pcopy
	.word @CFloatArray.Psize
	.word @CFloatArray.Presize,I?size
	.word @CFloatArray.Pempty
	.word @CFloatArray.Pappend,F?entry
	.word @CFloatArray.Pinsert,F?entry,I?pos
	.word @CFloatArray.Premove,I?pos
	.word @CFloatArray.Pfind,F?entry,I?from
	.word @CFloatArray.Pcontains,F?entry


; ------- BoolArray Class -------
; built-in array for 'bool'

; BoolArray:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; void BoolArray.init(int size)
CBoolArray.Pinit,I?size:
	; initialize array members
	ldw $cf, ($lb) -8				; load 'size'
	stw $cf, ($xr) %FIELD_SIZE		; write: this.size := size
	stw $cf, ($xr) %FIELD_BUFSIZE	; write: this.bufSize := size
	
	; determine buffer size (in bytes): numBytes := (size + 7) >> 3
	add $cf, $cf, 7
	slr $cf, $cf, 3
	
	; allocate array buffer
	push $cf
	insc AllocMem					; allocate buffer
	stw $ar, ($xr) %FIELD_BUFFER	; store pointer to buffer in array instance
	
	; initialize buffer with zeros
	mov $r0, 0
	.loop:
		jle .break					; compare: numBytes <= 0
		stw $r0, ($ar) 0			; store zero at (*buffer)
		inc $ar						; buffer++
		dec $cf						; numBytes--
		jmp .loop
	.break:
	ret 1

BoolArray.vtable:
	.word @CBoolArray.Prelease
	.word @CBoolArray.Pinit
	.word @CObject.PtoString
	.word @CBoolArray.Pinit,I?size
	; ...


; ------- Buffer Class -------
; built-in class as general purpose buffer

; Buffer:
;	Object	base	( 0)
;	int		size	(12)
;	int		bufSize	(16)
;	int		buffer	(20)

; bool Buffer.equals(Object rhs)
CBuffer.Pequals,R@Object?rhs:
	; ...
	ret 1

; void Buffer.init(int size, int fill)
CBuffer.Pinit,I?size,I?fill:
	; setup size
	ldw $cf, ($lb) -4				; load size
	jge .gt_zero					; check: size >= 0
		mov $cf, 0					; clamp size to 0
	.gt_zero:
	stw $cf, ($xr) %FIELD_SIZE		; this.size := size
	
	; setup actual buffer size
	mov $r0, $cf					; set bufSize := size
	cmp $r0, %MIN_BUFSIZE			; check: bufSize >= MIN_BUFSIZE
	jge .gt_min
		mov $r0, %MIN_BUFSIZE		; clamp bufSize to MIN_BUFSIZE
	.gt_min:
	stw $r0, ($xr) %FIELD_BUFSIZE	; this.bufSize := bufSize
	
	; allocate buffer
	push $r0
	insc AllocMem					; allocate buffer
	stw $ar, ($xr) %FIELD_BUFFER	; store pointer to buffer in array instance
	
	; initialize buffer
	ldw $r1, ($lb) -8			; load fill
	push $r1					; push fill
	push $r0					; push bufSize
	push $ar					; push buffer
	insc FillMem				; call FillMem(buffer, bufSize, fill)
	ret 2

; Buffer Buffer.copy()
CBuffer.Pcopy:
	; ...
	ret

; int Buffer.size()
CBuffer.Psize:
	ldw $ar, ($xr) %FIELD_SIZE	; load and return this.size
	ret

; void Buffer.resize(int size)
CBuffer.Presize,I?size:
	ldw $cf, ($lb) -4			; load size
	jge .else					; check: size >= 0
		mov $cf, 0				; clamp size to 0
	.else:
	mov $tr, $cf				; set tr := size
	ldw $cf, ($xr) %FIELD_SIZE	; load this.size
	cmp $cf, $tr				; compare this.size = size
	je .end
		push $tr
		call resize_buffer		; resize array buffer
	.end:
	ret 1

; void Buffer.writeByte(int offset, int value)
CBuffer.PwriteByte,I?offset,I?value:
	; ...
	ret 2

; int Buffer.readByte(int offset)
CBuffer.PreadByte,I?offset:
	; ...
	ret 1

; void Buffer.writeInt(int offset, int value)
CBuffer.PwriteInt,I?offset,I?value:
	; ...
	ret 2

; int Buffer.readInt(int offset)
CBuffer.PreadInt,I?offset:
	; ...
	ret 1

; void Buffer.writeFloat(int offset, float value)
CBuffer.PwriteFloat,I?offset,F?value:
	; ...
	ret 2

; float Buffer.readFloat(int offset)
CBuffer.PreadFloat,I?offset:
	; ...
	ret 1

; void Buffer.writeBuffer(int offset, int size, Buffer buffer)
CBuffer.PwriteBuffer,I?offset,I?size,R@Buffer?buffer:
	; ...
	ret 3

; void Buffer.readBuffer(int offset, int size, Buffer buffer)
CBuffer.PreadBuffer,I?offset,I?size,R@Buffer?buffer:
	; ...
	ret 3

Buffer.vtable:
	.word @CBuffer.Prelease
	.word @CBuffer.Pinit
	.word @CObject.PtypeID
	.word @CObject.PrefCount
	.word @CBuffer.Pequals,R@Object?rhs
	.word @CObject.PtoString
	.word @CBuffer.Ppointer
	.word @CBuffer.Pinit,I?size,I?fill
	.word @CBuffer.Pcopy
	.word @CBuffer.Psize
	.word @CBuffer.Presize,I?size
	.word @CBuffer.PwriteByte,I?offset,I?value
	.word @CBuffer.PreadByte,I?offset
	.word @CBuffer.PwriteInt,I?offset,I?value
	.word @CBuffer.PreadInt,I?offset
	.word @CBuffer.PwriteFloat,I?offset,F?value
	.word @CBuffer.PreadFloat,I?offset
	.word @CBuffer.PwriteBuffer,I?offset,I?size,R@Buffer?buffer
	.word @CBuffer.PreadBuffer,I?offset,I?size,R@Buffer?buffer


; ------- Intrinsics Class -------
; built-in class to access all VM intrinsics

; int Intrinsics.allocMem(int size)
CIntrinsics.PallocMem,I?size:
	ldw $tr, ($lb) -4
	push $tr
	insc AllocMem
	ret 1

; void Intrinsics.freeMem(int ptr)
CIntrinsics.PfreeMem,I?ptr:
	ldw $tr, ($lb) -4
	push $tr
	insc FreeMem
	ret 1

; void Intrinsics.copyMem(int destPtr, int srcPtr, int size)
CIntrinsics.PcopyMem,I?destPtr,I?srcPtr,I?size:
	ldw $tr, ($lb) -12
	push $tr
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc CopyMem
	ret 3

; void Intrinsics.sysCall(int commandPtr)
CIntrinsics.PsysCall,I?commandPtr:
	ldw $tr, ($lb) -4
	push $tr
	insc SysCall
	ret 1

; void Intrinsics.print(int textPtr)
CIntrinsics.Pprint,I?textPtr:
	ldw $tr, ($lb) -4
	push $tr
	insc Print
	ret 1

; void Intrinsics.printLn(int textPtr)
CIntrinsics.PprintLn,I?textPtr:
	ldw $tr, ($lb) -4
	push $tr
	insc PrintLn
	ret 1

; void Intrinsics.printInt(int value)
CIntrinsics.PprintInt,I?value:
	ldw $tr, ($lb) -4
	push $tr
	insc PrintInt
	ret 1

; void Intrinsics.printFloat(float value)
CIntrinsics.PprintFloat,F?value:
	ldw $tr, ($lb) -4
	push $tr
	insc PrintFloat
	ret 1

; void Intrinsics.input(int stringPtr, int maxLen)
CIntrinsics.Pinput,I?stringPtr,I?maxLen:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc Input
	ret 2

; int Intrinsics.inputInt()
CIntrinsics.PinputInt:
	insc InputInt
	ret

; float Intrinsics.inputFloat()
CIntrinsics.PinputFloat:
	insc InputFloat
	ret

; int Intrinsics.createFile(int filenamePtr)
CIntrinsics.PcreateFile,I?filenamePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc CreateFile
	ret 1

; int Intrinsics.deleteFile(int filenamePtr)
CIntrinsics.PdeleteFile,I?filenamePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc DeleteFile
	ret 1

; int Intrinsics.openFile(int filenamePtr, int modePtr)
CIntrinsics.PopenFile,I?filenamePtr,I?modePtr:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc OpenFile
	ret 2

; void Intrinsics.closeFile(int handlePtr)
CIntrinsics.PcloseFile,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc CloseFile
	ret 1

; void Intrinsics.fileSetPos(int handlePtr, int offset, int origin)
CIntrinsics.PfileSetPos,I?handlePtr,I?offset,I?origin:
	ldw $tr, ($lb) -12
	push $tr
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc FileSetPos
	ret 3

; int Intrinsics.fileGetPos(int handlePtr)
CIntrinsics.PfileGetPos,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc FileGetPos
	ret 1

; int Intrinsics.fileEOF(int handlePtr)
CIntrinsics.PfileEOF,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc FileEOF
	ret 1

; void Intrinsics.writeByte(int handlePtr, int value)
CIntrinsics.PwriteByte,I?handlePtr,I?value:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc WriteByte
	ret 2

; void Intrinsics.writeInt(int handlePtr, int value)
CIntrinsics.PwriteInt,I?handlePtr,I?value:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc WriteWord
	ret 2

; void Intrinsics.writeFloat(int handlePtr, float value)
CIntrinsics.PwriteFloat,I?handlePtr,F?value:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc WriteWord
	ret 2

; void Intrinsics.writeBuffer(int handlePtr, int bufferPtr, int size)
CIntrinsics.PwriteBuffer,I?handlePtr,I?bufferPtr,I?size:
	ldw $tr, ($lb) -12
	push $tr
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc WriteBuffer
	ret 3

; int Intrinsics.readByte(int handlePtr)
CIntrinsics.PreadByte,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc ReadByte
	ret 1

; int Intrinsics.readInt(int handlePtr)
CIntrinsics.PreadInt,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc ReadWord
	ret 1

; float Intrinsics.readFloat(int handlePtr)
CIntrinsics.PreadFloat,I?handlePtr:
	ldw $tr, ($lb) -4
	push $tr
	insc ReadWord
	ret 1

; void Intrinsics.readBuffer(int handlePtr, int bufferPtr, int size)
CIntrinsics.PreadBuffer,I?handlePtr,I?bufferPtr,I?size:
	ldw $tr, ($lb) -12
	push $tr
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc ReadBuffer
	ret 3

; int Intrinsics.time()
CIntrinsics.Ptime:
	insc Time
	ret

; void Intrinsics.sleep(int duration)
CIntrinsics.Psleep,I?duration:
	ldw $tr, ($lb) -4
	push $tr
	insc Sleep
	ret 1


; ------- Math Class -------
; built-in class for core math functionality

; float Math.sin(float x)
CMath.Psin,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Sin
	ret 1

; float Math.cos(float x)
CMath.Pcos,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Cos
	ret 1

; float Math.tan(float x)
CMath.Ptan,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Tan
	ret 1

; float Math.asin(float x)
CMath.Pasin,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc ASin
	ret 1

; float Math.acos(float x)
CMath.Pacos,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc ACos
	ret 1

; float Math.atan(float x)
CMath.Patan,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc ATan
	ret 1

; float Math.pow(float b, float e)
CMath.Ppow,F?b,F?e:
	ldw $tr, ($lb) -8
	push $tr
	ldw $tr, ($lb) -4
	push $tr
	insc Pow
	ret 1

; float Math.log(float x)
CMath.Plog,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Log
	ret 1

; float Math.log2(float x)
CMath.Plog2,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Log2
	ret 1

; float Math.log10(float x)
CMath.Plog10,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Log10
	ret 1

; float Math.sqrt(float x)
CMath.Psqrt,F?x:
	ldw $tr, ($lb) -4
	push $tr
	insc Sqrt
	ret 1

; int Math.randInt()
CMath.PrandInt:
	insc RandInt
	ret

; float Math.randFloat()
CMath.PrandFloat:
	insc RandFloat
	ret


